openapi: 3.0.3
info:
  title: Portal Backend API
  description: |
    陽明交通大學單一入口系統後端 API
    
    ## 功能概述
    - 用戶認證與授權
    - TOTP 雙因素認證
    - 郵件服務管理
    - 用戶資訊查詢
    - 系統管理功能
    
    ## 認證方式
    - LDAP 認證
    - JWT Token
    - TOTP 雙因素認證
    
    ## 安全功能
    - 速率限制
    - reCAPTCHA 驗證
    - IP 白名單檢查
    - 帳戶鎖定機制
  version: 1.0.0
  contact:
    name: Portal Development Team
    email: portal-dev@nycu.edu.tw
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://portal.nycu.edu.tw/api
    description: 生產環境
  - url: https://portal-dev.nycu.edu.tw/api
    description: 開發環境
  - url: http://localhost:8000/api
    description: 本地開發環境

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  /sendTOTP:
    post:
      tags:
        - TOTP 認證
      summary: 發送 TOTP 驗證碼
      description: |
        發送 TOTP 驗證碼到指定郵箱
        
        ## 限制條件
        - 最多重送 3 次，超過後鎖定 15 分鐘
        - 每次重送間隔 10 秒冷卻期
        - 需要 reCAPTCHA 驗證
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - email
                - token
                - recaptchaToken
              properties:
                email:
                  type: string
                  format: email
                  description: 用戶郵箱地址
                  example: "user@nycu.edu.tw"
                token:
                  type: string
                  description: 臨時 token
                  example: "abc123def456"
                recaptchaToken:
                  type: string
                  description: reCAPTCHA 驗證 token
                  example: "03AFcWeA..."
      responses:
        '200':
          description: 成功發送 TOTP
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "TOTP has been sent"
                  sent_time:
                    type: integer
                    description: 發送時間戳
                    example: 1748703433
                  retry_after:
                    type: integer
                    description: 下次可重送剩餘秒數
                    example: 60
                  resend_count:
                    type: integer
                    description: 當前重送次數
                    example: 1
                  max_resend_attempts:
                    type: integer
                    description: 最大重送次數
                    example: 3
                  token:
                    type: string
                    description: 新的臨時 token
                    example: "new_token_123"
        '400':
          description: 無效請求
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 無效或過期的 token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 重送次數過多，帳戶被鎖定
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Too many resend attempts, please try again later"
                  lockout_seconds:
                    type: integer
                    description: 鎖定剩餘秒數
                    example: 720
                  resend_count:
                    type: integer
                    example: 3
                  max_resend_attempts:
                    type: integer
                    example: 3
        '422':
          description: 輸入驗證失敗
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: 請求過於頻繁
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 伺服器錯誤
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /verifyTOTP:
    post:
      tags:
        - TOTP 認證
      summary: 驗證 TOTP 代碼
      description: |
        驗證用戶輸入的 TOTP 代碼
        
        ## 限制條件
        - 最多錯誤 3 次，超過後鎖定 15 分鐘
        - 需要 reCAPTCHA 驗證
        - TOTP 代碼有效期 5 分鐘
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - email
                - totp_code
                - token
                - recaptchaToken
              properties:
                email:
                  type: string
                  format: email
                  description: 用戶郵箱地址
                  example: "user@nycu.edu.tw"
                totp_code:
                  type: string
                  description: 6 位數 TOTP 驗證碼
                  pattern: '^[0-9]{6}$'
                  example: "123456"
                token:
                  type: string
                  description: 臨時 token
                  example: "abc123def456"
                recaptchaToken:
                  type: string
                  description: reCAPTCHA 驗證 token
                  example: "03AFcWeA..."
      responses:
        '200':
          description: 驗證成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "verify success"
                  token:
                    type: string
                    description: 驗證成功後的 token
                    example: "verified_token_123"
        '400':
          description: 無效請求
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 驗證失敗
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "totp verify failed"
                  fail_count:
                    type: integer
                    description: 當前失敗次數
                    example: 2
                  token:
                    type: string
                    description: 新的臨時 token
                    example: "new_token_123"
                  max_attempts:
                    type: integer
                    description: 最大嘗試次數
                    example: 3
        '403':
          description: 帳戶被鎖定
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Too many requests, please try again later"
                  lockout_seconds:
                    type: integer
                    description: 鎖定剩餘秒數
                    example: 720
        '422':
          description: 輸入驗證失敗
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: 請求過於頻繁
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 伺服器錯誤
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /resetPassword:
    post:
      tags:
        - 密碼管理
      summary: 重設密碼
      description: |
        使用 TOTP 驗證後重設用戶密碼
        
        ## 密碼要求
        - 長度至少 8 位
        - 包含大小寫字母、數字和特殊字符
        - 不能與舊密碼相同
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - email
                - newPassword
                - token
                - recaptchaToken
              properties:
                email:
                  type: string
                  format: email
                  description: 用戶郵箱地址
                  example: "user@nycu.edu.tw"
                newPassword:
                  type: string
                  description: 新密碼
                  minLength: 8
                  example: "NewP@ssw0rd123"
                token:
                  type: string
                  description: 重設密碼 token
                  example: "reset_token_123"
                recaptchaToken:
                  type: string
                  description: reCAPTCHA 驗證 token
                  example: "03AFcWeA..."
      responses:
        '200':
          description: 密碼重設成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Password reset successfully"
        '400':
          description: 無效請求
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 無效或過期的 token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 密碼不符合要求
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: 請求過於頻繁
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 伺服器錯誤
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/login:
    post:
      tags:
        - 用戶認證
      summary: 用戶登入 (v1)
      description: |
        使用 LDAP 進行用戶認證，支援雙因素認證流程

        ## 認證流程
        1. 驗證 reCAPTCHA token
        2. 驗證用戶帳號密碼 (LDAP)
        3. 檢查帳戶狀態 (是否禁用)
        4. 檢查網路位置 (校內/校外)
        5. 判斷是否需要雙因素認證
        6. 返回結果：
           - 需要 2FA: 返回 Pre-Auth Token
           - 不需要 2FA: 返回完整登入資訊

        ## 網路位置與 2FA 邏輯
        - **校外登入**:
          - 有設定 2FA → 要求 2FA 驗證
          - 無設定 2FA → 拒絕登入 (需使用 VPN)
        - **校內登入**:
          - 無設定 2FA → 直接登入
          - 有設定 2FA 且 AlwaysVerify=Y → 要求 2FA
          - 有設定 2FA 且 AlwaysVerify=N → 檢查信任裝置

        ## 安全功能
        - 登入失敗記錄與延遲機制
        - 3次失敗後開始延遲 (指數退避)
        - 密碼過期檢查 (180天)
        - 裝置指紋追蹤

      security: []

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - pwd
                - recaptchaToken
              properties:
                id:
                  type: string
                  description: 用戶帳號 (學號或人事代號)
                  example: "E00001"
                  minLength: 1
                pwd:
                  type: string
                  description: 用戶密碼
                  format: password
                  example: "MyP@ssw0rd"
                  minLength: 1
                recaptchaToken:
                  type: string
                  description: Google reCAPTCHA v3 驗證 token
                  example: "03AGdBq24..."
                deviceInfo:
                  type: string
                  description: 裝置指紋資訊 (JSON 字串格式)
                  example: '{"fingerPrint": "abc123def456"}'

      responses:
        '200':
          description: 登入成功或需要雙因素認證
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/LoginDirectSuccessResponse'
                  - $ref: '#/components/schemas/PreAuthTokenResponse'
              examples:
                directLogin:
                  summary: 直接登入成功 (無需 2FA)
                  value:
                    id: "E00001"
                    name: "王小明"
                    dept: "資訊工程學系"
                    mail: "e00001@nycu.edu.tw"
                    idStatus: "1"
                    ou: "STUDENT"
                    "2fa": false
                    token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

                require2FA:
                  summary: 需要雙因素認證
                  value:
                    "2fa": true
                    token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    methods: ["mobile-app", "email"]
                    expires_in: 180

        '400':
          description: 無效請求 - 缺少必要欄位
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: "error"
                message: "Missing required fields: id, pwd, recaptchaToken"
                statusCode: 400

        '403':
          description: 禁止訪問 - 校外無 2FA 或帳戶被鎖定
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                offCampusNo2FA:
                  summary: 校外登入但未設定 2FA
                  value:
                    status: "error"
                    message: "Please use VPN or configure two-factor authentication to login from off-campus"
                    statusCode: 403

        '404':
          description: 帳戶不存在、未啟用或密碼錯誤
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidCredentials:
                  summary: 帳號密碼錯誤
                  value:
                    status: "error"
                    message: "Invalid credentials or account not activated"
                    statusCode: 404

                accountDisabled:
                  summary: 帳戶已停用
                  value:
                    status: "error"
                    message: "Account not activated"
                    statusCode: 404

                passwordExpired:
                  summary: 密碼已過期
                  value:
                    status: "error"
                    message: "Password expired, please change password"
                    statusCode: 404

                tooManyAttempts:
                  summary: 登入嘗試次數過多
                  value:
                    status: "error"
                    message: "Too many failed attempts, please try again later"
                    statusCode: 404

        '500':
          description: 伺服器錯誤 - LDAP 連線失敗或系統錯誤
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                systemError:
                  summary: 系統錯誤
                  value:
                    status: "error"
                    message: "System error, please try again later"
                    statusCode: 500

  /api/v1/auth/send:
    post:
      tags:
        - 用戶認證
      summary: 發送驗證訊息
      description: |
        根據 Token 類型發送對應的驗證碼或驗證連結

        ## 核心職責
        根據 Token 內含的 `scope` 或 `auth_status` 欄位，觸發對應的發送邏輯：
        - **OTP 驗證碼**: 發送 6 位數字驗證碼
        - **驗證連結**: 發送包含 token 的驗證 URL（某些情境）

        ## 適用情境與 Token 類型

        ### 1. Pre-Auth Token (登入 2FA)
        - **使用場景**: 用戶完成帳號密碼驗證後，需要進行雙因素認證
        - **Token 來源**: `POST /api/v1/auth/login` 返回
        - **Token 特徵**:
          - `scope: "2fa_pending"`
          - `sub: "E00001"` (用戶 ID，由伺服器簽發)
          - 有效期: 3 分鐘
        - **發送內容**: OTP 驗證碼到用戶郵箱或行動裝置
        - **速率限制**: 無強制冷卻期（但有總次數限制，防止濫用）

        ### 2. Request Token (忘記密碼/帳號啟用)
        - **使用場景**: 用戶請求密碼重設或帳號啟用
        - **Token 來源**:
          - `POST /api/v1/auth/password-reset/request`
          - `POST /api/v1/auth/account-activation/request`
        - **Token 特徵**:
          - `scope: "password_reset"` 或 `"account_activation"`
          - `sub: "E00001"` (用戶 ID)
          - `email: "e00001@nycu.edu.tw"` (可選，發送目標)
          - 有效期: 10 分鐘
        - **發送內容**: OTP 驗證碼或重設連結
        - **速率限制**: **必須實施 30 秒冷卻期**，防止郵件/簡訊濫發 (DoS)

        ## 用戶識別方式
        - **用戶資訊來源**: 從 Token 的 `sub` (subject) 欄位取得用戶 ID
        - **安全保證**: 由於 `sub` 由伺服器簽名，用戶無法偽造他人身份
        - **發送目標**:
          - 優先使用 Token 中的 `email` 欄位（如果有）
          - 否則從資料庫查詢用戶的註冊郵箱

        ## 發送方法選擇
        - 客戶端可透過 `method` 參數選擇發送途徑
        - 支援的方法: `email` (郵箱) 或 `mobile-app` (行動裝置推送)
        - 如果不提供 `method`，使用系統預設方法或 Token 中記錄的偏好

        ## Token 驗證要求
        1. **簽名驗證**: 必須驗證 Token 使用正確的密鑰簽名
        2. **有效期驗證**: Token 必須未過期 (`exp` claim)
        3. **Audience/Issuer 驗證**: 確保 Token 由本系統簽發且用於本系統
        4. **Scope 驗證**: Token 的 `scope` 必須為允許的值之一
        5. **速率限制** (僅 Request Token):
           - 檢查上次發送時間 (從 Redis 取得)
           - 實施 30 秒冷卻期
           - 防止 DoS 攻擊

        ## 重要說明
        - 成功發送後，**Token 保持有效**
        - 同一個 Token 可用於：
          - 重新發送驗證訊息（受速率限制）
          - 提交驗證碼進行驗證 (POST /api/v1/auth/verify)
        - Token 在以下情況失效：
          - 驗證成功後
          - 超過有效期
          - 被明確撤銷

      security:
        - BearerAuth: []

      requestBody:
        required: false
        description: |
          請求 body 通常為空，或僅包含 `method` 欄位用於選擇發送方式。

          **注意**: 用戶身份資訊（用戶 ID、email）從 Token 的 `sub` 欄位取得，
          客戶端不應該也不需要在 body 中提供用戶資訊。
        content:
          application/json:
            schema:
              type: object
              properties:
                method:
                  type: string
                  description: 發送方法（可選）。如果不提供，使用系統預設或 Token 中的偏好設定。
                  enum:
                    - email
                    - mobile-app
                  example: "email"
            examples:
              emailMethod:
                summary: 使用 email 發送
                value:
                  method: "email"

              mobileAppMethod:
                summary: 使用 mobile-app 發送
                value:
                  method: "mobile-app"

              emptyBody:
                summary: 使用預設方法（空 body 或 {}）
                value: {}

      responses:
        '200':
          description: 驗證訊息發送成功
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
                    description: 成功訊息
                    example: "Verification code sent."
                  sent_to:
                    type: string
                    description: 發送目標（脫敏顯示，保護隱私）
                    example: "e***01@nycu.edu.tw"
                  method:
                    type: string
                    description: 實際使用的發送方法
                    enum:
                      - email
                      - mobile-app
                    example: "email"
                  expires_in:
                    type: integer
                    description: 驗證碼有效時間（秒）
                    example: 180
                  retry_after:
                    type: integer
                    description: 下次可重新發送的等待時間（秒，僅 Request Token 情境）
                    example: 30
              examples:
                preAuthTokenSuccess:
                  summary: Pre-Auth Token - 登入 2FA
                  description: 發送登入雙因素認證驗證碼
                  value:
                    message: "Verification code sent."
                    sent_to: "e***01@nycu.edu.tw"
                    method: "email"
                    expires_in: 180

                requestTokenSuccess:
                  summary: Request Token - 忘記密碼
                  description: 發送密碼重設驗證碼，包含冷卻期資訊
                  value:
                    message: "Verification code sent."
                    sent_to: "user@example.com"
                    method: "email"
                    expires_in: 600
                    retry_after: 30

        '400':
          description: 無效請求 - 參數錯誤
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidMethod:
                  summary: 不支援的發送方法
                  value:
                    status: "error"
                    message: "Invalid method. Supported methods: email, mobile-app"
                    statusCode: 400

                methodNotAvailable:
                  summary: 該用戶不支援此發送方法
                  value:
                    status: "error"
                    message: "Mobile app method not available for this user"
                    statusCode: 400

        '401':
          description: 未授權 - Token 無效、過期或簽名錯誤
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingToken:
                  summary: 缺少 Authorization header
                  value:
                    status: "error"
                    message: "Missing authorization token"
                    statusCode: 401

                invalidSignature:
                  summary: Token 簽名無效
                  value:
                    status: "error"
                    message: "Invalid token signature"
                    statusCode: 401

                expiredToken:
                  summary: Token 已過期
                  value:
                    status: "error"
                    message: "Token expired"
                    statusCode: 401

                invalidScope:
                  summary: Token scope 不適用於此操作
                  value:
                    status: "error"
                    message: "Invalid token scope for send operation"
                    statusCode: 401

        '403':
          description: 禁止訪問 - Token 有效但操作被拒絕
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidAudience:
                  summary: Token audience 不匹配
                  value:
                    status: "error"
                    message: "Invalid token audience"
                    statusCode: 403

                invalidIssuer:
                  summary: Token issuer 不匹配
                  value:
                    status: "error"
                    message: "Invalid token issuer"
                    statusCode: 403

                tokenRevoked:
                  summary: Token 已被撤銷
                  value:
                    status: "error"
                    message: "Token has been revoked"
                    statusCode: 403

        '429':
          description: 速率限制 - 請求過於頻繁（僅 Request Token 情境）
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - message
                  - retry_after
                properties:
                  status:
                    type: string
                    enum:
                      - error
                    example: "error"
                  message:
                    type: string
                    description: 錯誤訊息
                    example: "Too many requests. Please wait before resending."
                  retry_after:
                    type: integer
                    description: 需要等待的秒數（30 秒冷卻期）
                    example: 25
                  last_sent_at:
                    type: integer
                    description: 上次發送時間戳（Unix timestamp）
                    example: 1730000005
                  statusCode:
                    type: integer
                    example: 429
              examples:
                cooldownPeriod:
                  summary: 冷卻期間（30秒內重複發送）
                  description: Request Token 情境下，距離上次發送未滿 30 秒
                  value:
                    status: "error"
                    message: "Too many requests. Please wait 25 seconds before resending."
                    retry_after: 25
                    last_sent_at: 1730000005
                    statusCode: 429

        '500':
          description: 伺服器錯誤 - 發送失敗或系統錯誤
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                emailSendFailure:
                  summary: 郵件發送失敗
                  value:
                    status: "error"
                    message: "Failed to send email"
                    statusCode: 500

                smsSendFailure:
                  summary: 簡訊發送失敗
                  value:
                    status: "error"
                    message: "Failed to send SMS"
                    statusCode: 500

                systemError:
                  summary: 系統錯誤
                  value:
                    status: "error"
                    message: "Internal server error"
                    statusCode: 500

  /api/v1/auth/verify:
    post:
      tags:
        - 用戶認證
      summary: 驗證 OTP/Code
      description: |
        驗證用戶提交的 OTP 驗證碼或 Code，完成認證流程

        ## 核心職責
        根據不同的認證流程，驗證用戶提交的驗證碼：
        - **OTP 驗證**: 驗證 6 位數字的 OTP 碼
        - **Code 驗證**: 驗證 Magic Link 或重設連結中的 Code

        ## 適用情境與認證流程

        ### 1. Pre-Auth Token (登入 2FA)
        - **使用場景**: 用戶完成帳號密碼驗證後，需要驗證 2FA OTP
        - **Token 來源**: `POST /api/v1/auth/login` 返回的 Pre-Auth Token
        - **請求方式**:
          - Header: `Authorization: Bearer <Pre-Auth Token>`
          - Body: `{"otp": "123456"}`
        - **Token 特徵**:
          - `scope: "2fa_pending"`
          - `sub: "E00001"` (用戶 ID)
          - 有效期: 3 分鐘
        - **驗證成功**: 銷毀 Pre-Auth Token，簽發完整的 Access Token
        - **安全機制**:
          - 最大嘗試次數限制 (防暴力破解)
          - Token 綁定 IP/User-Agent (可選)

        ### 2. Request Token (忘記密碼/帳號啟用)
        - **使用場景**: 用戶驗證忘記密碼或帳號啟用流程中的驗證碼
        - **Token 來源**:
          - `POST /api/v1/auth/password-reset/request`
          - `POST /api/v1/auth/account-activation/request`
        - **請求方式**:
          - Header: 無 (匿名請求)
          - Body: `{"code": "<CodeValue>", "username": "user@example.com"}`
        - **驗證成功**:
          - 忘記密碼/帳號啟用: 簽發 Pre-Auth Token (scope: `password_reset_verified`) 用於後續設定新密碼
        - **安全機制**:
          - Code 單次有效 (驗證後立即失效)
          - 最大嘗試次數限制

        ## 驗證流程

        ### 2FA 流程 (Pre-Auth Token)
        1. 從 Authorization Header 解析並驗證 Pre-Auth Token
        2. 檢查 Token 簽名、有效期、scope
        3. 從 Redis 檢查嘗試次數 (key: `2fa_attempts:{jti}`)
        4. 驗證用戶提交的 OTP
        5. 成功: 銷毀 Pre-Auth Token，簽發 Access Token
        6. 失敗: 嘗試次數 +1，返回錯誤

        ### 忘密/啟用流程 (Code)
        1. 從 Body 取得 Code 和 username
        2. 從 Redis 查詢 Code 對應的狀態 (key: `reset_code:{code}`)
        3. 驗證 Code 有效性、過期時間、使用次數
        4. 驗證 username 與 Code 綁定的用戶是否一致
        5. 成功: 銷毀 Code，簽發新 Token 或執行相應操作
        6. 失敗: 嘗試次數 +1，返回錯誤

        ## 嘗試次數限制
        - **最大嘗試次數**: 3 次
        - **超過限制**: 鎖定 Token/Code，返回 403 Forbidden
        - **計數器重置**: Token/Code 過期時自動清除

        ## Token 過期時間 (與 /api/v1/auth/send 一致)
        - **Pre-Auth Token**: 3 分鐘 (180 秒)
        - **Request Token**: 10 分鐘 (600 秒)
        

      security:
        - BearerAuth: []

      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Verify2FARequest'
                - $ref: '#/components/schemas/VerifyCodeRequest'
            examples:
              verify2FA:
                summary: 驗證 2FA OTP (登入流程)
                value:
                  otp: "123456"

              verifyPasswordReset:
                summary: 驗證忘記密碼 Code
                value:
                  code: "abc123def456"
                  username: "user@example.com"

              verifyAccountActivation:
                summary: 驗證帳號啟用 Code
                value:
                  code: "xyz789uvw012"
                  username: "newuser@example.com"

      responses:
        '200':
          description: 驗證成功
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Verify2FASuccessResponse'
                  - $ref: '#/components/schemas/VerifyPasswordResetSuccessResponse'
                  - $ref: '#/components/schemas/VerifyActivationSuccessResponse'
              examples:
                verify2FASuccess:
                  summary: 2FA 驗證成功 - 返回 Access Token
                  value:
                    status: "success"
                    message: "Authentication successful"
                    access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    token_type: "Bearer"
                    expires_in: 3600
                    user:
                      id: "E00001"
                      name: "張三"
                      email: "e00001@nycu.edu.tw"

                verifyPasswordResetSuccess:
                  summary: 忘記密碼驗證成功 - 返回 Pre-Auth Token
                  value:
                    status: "success"
                    message: "Verification successful. You can now reset your password."
                    reset_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    expires_in: 180

                verifyActivationSuccess:
                  summary: 帳號啟用驗證成功
                  value:
                    status: "success"
                    message: "Verification successful. You can now set your password."
                    reset_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    expires_in: 180

        '400':
          description: 請求格式錯誤
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingOTP:
                  summary: 缺少 OTP
                  value:
                    status: "error"
                    message: "OTP is required"
                    statusCode: 400

                missingCode:
                  summary: 缺少 Code 或 username
                  value:
                    status: "error"
                    message: "Code and username are required"
                    statusCode: 400

                invalidOTPFormat:
                  summary: OTP 格式錯誤
                  value:
                    status: "error"
                    message: "OTP must be 6 digits"
                    statusCode: 400

        '401':
          description: 認證失敗
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingToken:
                  summary: 缺少 Pre-Auth Token (2FA 流程)
                  value:
                    status: "error"
                    message: "Authorization token is required"
                    statusCode: 401

                invalidToken:
                  summary: Token 無效或過期
                  value:
                    status: "error"
                    message: "Invalid or expired token"
                    statusCode: 401

                incorrectOTP:
                  summary: OTP 錯誤
                  value:
                    status: "error"
                    message: "Incorrect OTP"
                    remaining_attempts: 3
                    statusCode: 401

                incorrectCode:
                  summary: Code 錯誤
                  value:
                    status: "error"
                    message: "Incorrect verification code"
                    remaining_attempts: 2
                    statusCode: 401

                expiredCode:
                  summary: Code 已過期
                  value:
                    status: "error"
                    message: "Verification code has expired"
                    statusCode: 401

        '403':
          description: 權限不足或嘗試次數過多
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tooManyAttempts:
                  summary: 嘗試次數過多 (2FA)
                  value:
                    status: "error"
                    message: "Too many failed attempts. Token has been revoked."
                    statusCode: 403

                codeLocked:
                  summary: Code 已被鎖定
                  value:
                    status: "error"
                    message: "Verification code has been locked due to too many failed attempts"
                    statusCode: 403

                invalidScope:
                  summary: Token scope 不匹配
                  value:
                    status: "error"
                    message: "Invalid token scope for this operation"
                    statusCode: 403

                tokenRevoked:
                  summary: Token 已被撤銷
                  value:
                    status: "error"
                    message: "Token has been revoked"
                    statusCode: 403

        '500':
          description: 伺服器錯誤
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                redisError:
                  summary: Redis 連線錯誤
                  value:
                    status: "error"
                    message: "Failed to verify token state"
                    statusCode: 500

                systemError:
                  summary: 系統錯誤
                  value:
                    status: "error"
                    message: "Internal server error"
                    statusCode: 500

  /PortalLdapLogin:
    post:
      tags:
        - 用戶認證
      summary: LDAP 登入
      description: |
        使用 LDAP 進行用戶認證
        
        ## 認證流程
        1. 驗證用戶名和密碼
        2. 檢查帳戶狀態
        3. 檢查是否需要雙因素認證
        4. 返回 JWT token 或要求 2FA
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - id
                - pwd
                - recaptchaToken
              properties:
                id:
                  type: string
                  description: 用戶 ID
                  example: "12345678"
                pwd:
                  type: string
                  description: 用戶密碼
                  example: "userpassword"
                recaptchaToken:
                  type: string
                  description: reCAPTCHA 驗證 token
                  example: "03AFcWeA..."
                deviceInfo:
                  type: string
                  description: 設備資訊 (JSON 格式)
                  example: '{"fingerPrint": "device_hash_123"}'
      responses:
        '200':
          description: 登入成功
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/LoginSuccessResponse'
                  - $ref: '#/components/schemas/TwoFactorRequiredResponse'
        '400':
          description: 無效請求
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 認證失敗
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 帳戶不存在或未啟用
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: 請求過於頻繁
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /TwofaLogin:
    post:
      tags:
        - 雙因素認證
      summary: 雙因素認證登入
      description: |
        完成雙因素認證流程
        
        ## 流程
        1. 驗證 TOTP 代碼
        2. 檢查設備指紋
        3. 返回完整的用戶資訊和 token
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - token
                - totp_code
                - recaptchaToken
              properties:
                token:
                  type: string
                  description: 2FA token
                  example: "2fa_token_123"
                totp_code:
                  type: string
                  description: TOTP 驗證碼
                  pattern: '^[0-9]{6}$'
                  example: "123456"
                recaptchaToken:
                  type: string
                  description: reCAPTCHA 驗證 token
                  example: "03AFcWeA..."
      responses:
        '200':
          description: 2FA 驗證成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccessResponse'
        '400':
          description: 無效請求
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 驗證失敗
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: 請求過於頻繁
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /getUserInfo:
    post:
      tags:
        - 用戶資訊
      summary: 獲取用戶資訊
      description: |
        獲取當前登入用戶的詳細資訊
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: JWT token
                  example: "jwt_token_123"
      responses:
        '200':
          description: 成功獲取用戶資訊
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoResponse'
        '401':
          description: 無效或過期的 token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 用戶不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /checkMail:
    post:
      tags:
        - 郵件服務
      summary: 檢查郵件帳戶狀態
      description: |
        檢查用戶的郵件帳戶狀態和設定
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: JWT token
                  example: "jwt_token_123"
      responses:
        '200':
          description: 成功獲取郵件資訊
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MailInfoResponse'
        '401':
          description: 無效或過期的 token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /relay:
    post:
      tags:
        - 系統服務
      summary: 系統轉發服務
      description: |
        轉發請求到其他校內系統
        
        ## 限制
        - 僅限校內 IP 訪問
        - 需要 VPN 連接
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - url
                - token
                - sysDirect
              properties:
                url:
                  type: string
                  description: 目標系統 URL
                  example: "https://system.nycu.edu.tw"
                token:
                  type: string
                  description: 用戶 token
                  example: "user_token_123"
                sysDirect:
                  type: string
                  description: 系統識別碼
                  example: "student_system"
      responses:
        '200':
          description: 轉發成功
          content:
            text/html:
              schema:
                type: string
        '403':
          description: 需要 VPN 連接
          content:
            text/html:
              schema:
                type: string
        '405':
          description: 不允許的 URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Token 認證
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API Key 認證

  schemas:
    ErrorResponse:
      type: object
      properties:
        status:
          type: boolean
          example: false
        message:
          type: string
          description: 錯誤訊息
          example: "Invalid request"
        statusCode:
          type: integer
          description: HTTP 狀態碼
          example: 400

    LoginSuccessResponse:
      type: object
      properties:
        id:
          type: string
          description: 用戶 ID
          example: "12345678"
        name:
          type: string
          description: 用戶姓名
          example: "張三"
        dept:
          type: string
          description: 部門
          example: "資訊工程學系"
        mail:
          type: string
          format: email
          description: 郵箱地址
          example: "user@nycu.edu.tw"
        idStatus:
          type: string
          description: 帳戶狀態
          example: "active"
        ou:
          type: string
          description: 組織單位
          example: "student"
        token:
          type: string
          description: JWT token
          example: "jwt_token_123"
        loginInfo:
          type: object
          description: 登入資訊
        deviceInfo:
          type: object
          description: 設備資訊

    TwoFactorRequiredResponse:
      type: object
      properties:
        '2fa':
          type: boolean
          example: true
        token:
          type: string
          description: 2FA token
          example: "2fa_token_123"

    LoginDirectSuccessResponse:
      type: object
      description: 直接登入成功響應 (無需 2FA)
      properties:
        id:
          type: string
          description: 用戶 ID
          example: "E00001"
        name:
          type: string
          description: 用戶姓名
          example: "王小明"
        dept:
          type: string
          description: 部門/系所
          example: "資訊工程學系"
        mail:
          type: string
          format: email
          description: 郵箱地址
          example: "e00001@nycu.edu.tw"
        idStatus:
          type: string
          description: 帳戶狀態 (1=啟用)
          example: "1"
        ou:
          type: string
          description: 組織單位 (STUDENT/STAFF/FACULTY)
          example: "STUDENT"
        '2fa':
          type: string
          description: 2FA 狀態
          enum: ["enable", "disable"]
          example: "disable"
        token:
          type: string
          description: JWT 完整登入 token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IkUwMDAwMSIsIm9sZGlkIjoiRTAwMDAxIiwib3UiOiJTVFVERU5UIiwiaWF0IjoxNzMwMDAwMDAwfQ..."

    PreAuthTokenResponse:
      type: object
      description: Pre-Auth Token 響應 (需要 2FA 驗證)
      required:
        - 2fa
        - token
        - methods
        - expires_in
      properties:
        '2fa':
          type: boolean
          description: 是否需要 2FA
          example: true
        token:
          type: string
          description: |
            Pre-Auth Token (JWT 格式)

            Payload 包含：
            - sub: 用戶 ID
            - scope: "2fa_pending"
            - jti: 唯一 token ID
            - iat: 簽發時間
            - exp: 過期時間 (3分鐘)
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJFMDAwMDEiLCJzY29wZSI6IjJmYV9wZW5kaW5nIiwianRpIjoiYTFiMmMzZDRlNWY2IiwiaWF0IjoxNzMwMDAwMDAwLCJleHAiOjE3MzAwMDAxODB9..."
        methods:
          type: array
          description: 可用的 2FA 驗證方法
          items:
            type: string
            enum: ["mobile-app", "email"]
          example: ["mobile-app", "email"]
        expires_in:
          type: integer
          description: Token 過期時間 (秒)
          example: 180

    UserInfoResponse:
      type: object
      properties:
        status:
          type: boolean
          example: true
        data:
          type: object
          properties:
            id:
              type: string
              example: "12345678"
            name:
              type: string
              example: "張三"
            dept:
              type: string
              example: "資訊工程學系"
            mail:
              type: string
              format: email
              example: "user@nycu.edu.tw"
            mobile:
              type: string
              example: "0912345678"
            title:
              type: string
              example: "學生"
            birthday:
              type: string
              format: date
              example: "1990-01-01"

    MailInfoResponse:
      type: object
      properties:
        status:
          type: boolean
          example: true
        data:
          type: object
          properties:
            email:
              type: string
              format: email
              example: "user@nycu.edu.tw"
            status:
              type: string
              example: "active"
            quota:
              type: integer
              example: 1073741824
            used:
              type: integer
              example: 536870912
            lastLogin:
              type: string
              format: date-time
              example: "2024-12-01T10:30:00Z"

    Verify2FARequest:
      type: object
      description: 驗證 2FA OTP 請求 (需要 Pre-Auth Token)
      required:
        - otp
      properties:
        otp:
          type: string
          description: 6 位數字 OTP 驗證碼
          pattern: '^[0-9]{6}$'
          minLength: 6
          maxLength: 6
          example: "123456"

    VerifyCodeRequest:
      type: object
      description: 驗證 Code 請求 (忘記密碼/帳號啟用流程)
      required:
        - code
        - username
      properties:
        code:
          type: string
          description: 驗證碼 (從郵件或連結取得)
          minLength: 1
          example: "abc123def456"
        username:
          type: string
          description: 用戶名稱或郵箱
          minLength: 1
          example: "user@example.com"

    Verify2FASuccessResponse:
      type: object
      description: 2FA 驗證成功響應 (返回完整 Access Token)
      required:
        - status
        - message
        - access_token
        - token_type
        - expires_in
      properties:
        status:
          type: string
          enum:
            - success
          example: "success"
        message:
          type: string
          description: 成功訊息
          example: "Authentication successful"
        access_token:
          type: string
          description: |
            完整的 Access Token (JWT 格式)

            Payload 包含：
            - sub: 用戶 ID
            - oldid: 舊 ID (兼容性)
            - ou: 組織單位 (STUDENT/STAFF/FACULTY)
            - iat: 簽發時間
            - exp: 過期時間 (依系統設定，通常 1-24 小時)
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJFMDAwMDEiLCJvbGRpZCI6IkUwMDAwMSIsIm91IjoiU1RVREVOVCIsImlhdCI6MTczMDAwMDAwMCwiZXhwIjoxNzMwMDAzNjAwfQ..."
        token_type:
          type: string
          enum:
            - Bearer
          example: "Bearer"
        expires_in:
          type: integer
          description: Token 過期時間 (秒)
          example: 3600
        user:
          type: object
          description: 用戶基本資訊
          properties:
            id:
              type: string
              description: 用戶 ID
              example: "E00001"
            name:
              type: string
              description: 用戶姓名
              example: "張三"
            email:
              type: string
              format: email
              description: 郵箱地址
              example: "e00001@nycu.edu.tw"

    VerifyPasswordResetSuccessResponse:
      type: object
      description: 忘記密碼驗證成功響應 (返回 Pre-Auth Token 用於設定新密碼)
      required:
        - status
        - message
        - reset_token
        - expires_in
      properties:
        status:
          type: string
          enum:
            - success
          example: "success"
        message:
          type: string
          description: 成功訊息
          example: "Verification successful. You can now reset your password."
        reset_token:
          type: string
          description: |
            Pre-Auth Token (JWT 格式) 用於後續設定新密碼

            Payload 包含：
            - sub: 用戶 ID
            - scope: "password_reset_verified"
            - jti: 唯一 token ID
            - iat: 簽發時間
            - exp: 過期時間 (3 分鐘)
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJFMDAwMDEiLCJzY29wZSI6InBhc3N3b3JkX3Jlc2V0X3ZlcmlmaWVkIiwianRpIjoiYTFiMmMzZDQiLCJpYXQiOjE3MzAwMDAwMDAsImV4cCI6MTczMDAwMDE4MH0..."
        expires_in:
          type: integer
          description: Token 過期時間 (秒)
          example: 180

    VerifyActivationSuccessResponse:
      type: object
      description: 帳號啟用驗證成功響應 (返回 Pre-Auth Token 用於設定密碼)
      required:
        - status
        - message
        - reset_token
        - expires_in
      properties:
        status:
          type: string
          enum:
            - success
          example: "success"
        message:
          type: string
          description: 成功訊息
          example: "Verification successful. You can now set your password."
        reset_token:
          type: string
          description: |
            Pre-Auth Token (JWT 格式) 用於設定密碼

            Payload 包含：
            - sub: 用戶 ID
            - scope: "account_activation_verified"
            - jti: 唯一 token ID
            - iat: 簽發時間
            - exp: 過期時間 (3 分鐘)
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJFMDAwMDEiLCJzY29wZSI6ImFjY291bnRfYWN0aXZhdGlvbl92ZXJpZmllZCIsImp0aSI6ImExYjJjM2Q0IiwiaWF0IjoxNzMwMDAwMDAwLCJleHAiOjE3MzAwMDAxODB9..."
        expires_in:
          type: integer
          description: Token 過期時間 (秒)
          example: 180

tags:
  - name: TOTP 認證
    description: 雙因素認證相關 API
  - name: 用戶認證
    description: 用戶登入和認證相關 API
  - name: 雙因素認證
    description: 2FA 相關 API
  - name: 密碼管理
    description: 密碼重設和管理相關 API
  - name: 用戶資訊
    description: 用戶資訊查詢相關 API
  - name: 郵件服務
    description: 郵件帳戶管理相關 API
  - name: 系統服務
    description: 系統轉發和其他服務 API